#
# Licensed to Apereo under one or more contributor license
# agreements. See the NOTICE file distributed with this work
# for additional information regarding copyright ownership.
# Apereo licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file
# except in compliance with the License.  You may obtain a
# copy of the License at the following location:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Also see connection pooling config at bottom.
environment.build.hibernate.connection.driver_class=org.postgresql.Driver
environment.build.hibernate.connection.url=jdbc:postgresql://postgresssp:5432/ssp
environment.build.hibernate.connection.username=sspadmin
environment.build.hibernate.connection.password=sspadmin
environment.build.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect

environment.build.raweventsdb.connection.driver_class=${environment.build.hibernate.connection.driver_class}
environment.build.raweventsdb.connection.url=${environment.build.hibernate.connection.url}
environment.build.raweventsdb.connection.username=${environment.build.hibernate.connection.username}
environment.build.raweventsdb.connection.password=${environment.build.hibernate.connection.password}
environment.build.raweventsdb.hibernate.dialect=${environment.build.hibernate.dialect}

environment.build.aggreventsdb.connection.driver_class=${environment.build.hibernate.connection.driver_class}
environment.build.aggreventsdb.connection.url=${environment.build.hibernate.connection.url}
environment.build.aggreventsdb.connection.username=${environment.build.hibernate.connection.username}
environment.build.aggreventsdb.connection.password=${environment.build.hibernate.connection.password}
environment.build.aggreventsdb.hibernate.dialect=${environment.build.hibernate.dialect}

# uPortal server configuration properties
environment.build.uportal.server=localhost:8080
environment.build.uportal.protocol=http
environment.build.uportal.context=/ssp-platform
environment.build.uportal.email.fromAddress=ssp@university.edu

# CAS server configuration properties
environment.build.cas.server=localhost:8080
environment.build.cas.protocol=http

##SSO Properties
# For the REST /sso API
environment.build.sso.sharedSecret=
environment.build.sso.checkTimeStampRange=true
environment.build.sso.signedUrlToLiveMinutes=5
environment.build.sso.requireSecure=true
environment.build.sso.ticketTimeToLiveMinutes=5

# Spring pseudo-URL pointing to a Groovy implementation of IPersonAttributesFilter
# suitable for filtering person directory lookups for end users hitting the
# portal via the /sso API. OOTB options:
#
#   classpath:org/jasig/portal/portlets/lookup/NoOpPersonAttributesFilter.groovy - Default. Does nothing.
#
#   classpath:org/jasig/portal/portlets/lookup/RequiredBaseDnPersonAttributesFilter.groovy - Limits directory search
#      results to only those persons associated with the baseDn configured by an additional property set in this
#      file. E.g. to limit SSO to users in the 'faculty' branch of an imaginary LDAP directory:
#
#        environment.build.sso.personFilteringBaseDn=ou=faculty,o=persondir
#
#      For this to work, personDirectoryContext.xml DAOs must be configured to expose a logical attribute named
#      'distinguishedName'

#   classpath:org/jasig/portal/portlets/lookup/PreferredBaseDnPersonAttributesFilter.groovy - Similar to
#      RequiredBaseDnPersonAttributesFilter but allows results not associated with
#      environment.build.sso.personFilteringBaseDn. I.e. if an end user has multiple directory entries with the same
#      environment.build.sso.personDirectoryUuidAttributeName (see below) and that attribute is being used as the
#      lookup key, choose the entry associated with environment.build.sso.personFilteringBaseDn, if any. Otherwise
#      return all results (which may result in an error downstream). Use this is you want to allow SSO for
#      users in a variety of base DNs, but need a policy for narrowing down entries for certain users.
#
# If none of these strategies work for your deployment, you can define a custom strategy without forking Platform
# source by defining your Groovy-implemented IPersonAttributesFilter anywhere that can be referenced by a Spring
# pseudo-URL. If you define a file: URL, changes to the script will be picked up automatically without requiring
# an app server restart. E.g.:
#
#  environment.build.sso.personFilteringScript=file:/opt/sspconfig/MyPersonAttributesFilter.groovy
#
environment.build.sso.personFilteringScript=classpath:org/jasig/portal/portlets/lookup/NoOpPersonAttributesFilter.groovy

# Specifies the person attribute name which PreferredBaseDnPersonAttributesFilter will treat as a unique directory
# identifier for a real-world human being. E.g. if a human has mulitple accounts in the directory, this attribute
# indicates that they are all related to that same human. This property really only exists to ensure
# PreferredBaseDnPersonAttributesFilter does not contain hard-coded SSP behaviors and thus should never need to be
# modified for SSP deployments.
environment.build.sso.personDirectoryUuidAttributeName=schoolId

# For the JVM-local SsoTicketService API. This
# typically needs to match a corresponding config in
# the SSP webapp. See portal.properties for more info.
# A blank value here effectively disables this service,
# *which includes disabling the REST /sso API*
environment.build.sso.local.sharedSecret=

environment.build.portaldb.initial.size=1
environment.build.portaldb.min.idle=1
environment.build.portaldb.max.active=50
environment.build.portaldb.max.idle=50
environment.build.portaldb.max.wait=2000
environment.build.portaldb.abandon.when.percentage.full=70
environment.build.portaldb.remove.abandoned=true
environment.build.portaldb.remove.abandoned.timeout=300
environment.build.portaldb.jdbc.interceptors=ConnectionState(useEquals=true);ResetAbandonedTimer
environment.build.portaldb.test.while.idle=true
environment.build.portaldb.test.on.borrow=true

environment.build.raweventsdb.initial.size=1
environment.build.raweventsdb.min.idle=1
environment.build.raweventsdb.max.active=50
environment.build.raweventsdb.max.idle=50
environment.build.raweventsdb.max.wait=2000
environment.build.raweventsdb.abandon.when.percentage.full=70
environment.build.raweventsdb.remove.abandoned=true
environment.build.raweventsdb.remove.abandoned.timeout=300
environment.build.raweventsdb.jdbc.interceptors=ConnectionState(useEquals=true);ResetAbandonedTimer
environment.build.raweventsdb.test.while.idle=true
environment.build.raweventsdb.test.on.borrow=true

environment.build.aggreventsdb.initial.size=1
environment.build.aggreventsdb.min.idle=1
environment.build.aggreventsdb.max.active=50
environment.build.aggreventsdb.max.idle=50
environment.build.aggreventsdb.max.wait=2000
environment.build.aggreventsdb.abandon.when.percentage.full=70
environment.build.aggreventsdb.remove.abandoned=true
environment.build.aggreventsdb.remove.abandoned.timeout=300
environment.build.aggreventsdb.jdbc.interceptors=ConnectionState(useEquals=true);ResetAbandonedTimer
environment.build.aggreventsdb.test.while.idle=true
environment.build.aggreventsdb.test.on.borrow=true

exists.only.for.testing.1=testing.default.value.1
exists.only.for.testing.2=testing.default.value.2
exists.only.for.testing.3=testing.default.value.3

